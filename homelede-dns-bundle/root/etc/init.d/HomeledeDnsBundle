#!/bin/sh /etc/rc.common

homeledeDnsBundlePath=/var/homeledeDnsBundle
if [ ! -d $homeledeDnsBundlePath ]; then
	mkdir -p $homeledeDnsBundlePath
fi

source /etc/homeledeDnsBundle/uciconfig_util.sh
source /etc/homeledeDnsBundle/file_replace_util.sh

source /etc/homeledeDnsBundle/adBlockCtrl.sh
source /etc/homeledeDnsBundle/dnsmasqCtl.sh
source /etc/homeledeDnsBundle/shuntCtl.sh
source /etc/homeledeDnsBundle/domesticDnsCtl.sh
source /etc/homeledeDnsBundle/overseasDnsCtl.sh

START=18
STOP=01

CONFIGURATION=homeledeDnsBundle

function shutdownBundle()
{
	#停止AdBlock shuntResolution domesticDns overseasDns
	#确认dnsmasq运行于53
	#如果PSW运行中，则交给PSW
	#否则，恢复系统默认dns解析 /var/resolv.conf.d/resolv.conf.auto
	#/var/resolv.conf.ppp
	return 0
}

function killComp()
{
	local pidFile=$1
	if [ ! -f $pidFile ]; then
		return 1;
	fi
	local pid=$(cat $pidFile)
	kill -9 $pid
	if [ "$?" == 0 ]; then
		rm -f $pidFile
		return 0
	else
		return 1
	fi
}

service_triggers()
{
    procd_add_reload_trigger "$CONFIGURATION"
}

reload_service()
{
	stop
    start
}

function makeDnsmasqListenAt53()
{
	getUciConfig dhcp dnsmasq port "53"
	# 端口53
	if [ "${port}" != "53" ]; then
		setUciConfig dhcp dnsmasq port 53
		needRestartDnsmasq=1
	fi
}
function makeDnsmasqListenAt54()
{
	getUciConfig dhcp dnsmasq port
	# 端口53
	if [ "${port}" != "54" ]; then
		setUciConfig dhcp dnsmasq port 54
		needRestartDnsmasq=1
	fi
}
function makeDnsmasqUsingDefaultReslovePolicy()
{
	#让dnsmasq使用默认策略
	uci -q set dhcp.@dnsmasq[0].noresolv=0
	if [ -s "/tmp/resolv.conf.d/resolv.conf.auto" ] && [ -n "$(grep "nameserver" /tmp/resolv.conf.d/resolv.conf.auto)" ]; then
		uci -q set dhcp.@dnsmasq[0].resolvfile=/tmp/resolv.conf.d/resolv.conf.auto
	elif [ -s "/tmp/resolv.conf.auto" ] && [ -n "$(grep "nameserver" /tmp/resolv.conf.auto)" ]; then
		uci -q set dhcp.@dnsmasq[0].resolvfile=/tmp/resolv.conf.auto
	fi
	needRestartDnsmasq=1
}
function setLanDnsToLocalhost()
{
	#获取br-lan定义的DNS
	getUciConfig network lan dns
	if [ "$dns" == "" ]; then
		#设置LAN的DNS为本机DNS，以便分流
		setUciConfig network lan dns 127.0.0.1
		needRestartNetwork=1
	fi
}
function setLanDnsToEmpty()
{
	getUciConfig network lan dns
	if [ "$dns" != "" ]; then
		#设置LAN的DNS为空
		uci -q delete network.lan.dns
		needRestartNetwork=1
	fi
}
function setDnsmasqUpstreamToEmpty()
{
	getUciConfig dhcp dnsmasq server
	if [ "$server" != "" ]; then
		uci -q del dhcp.@dnsmasq[-1].server
		needRestartDnsmasq=1
	fi
}

source /etc/homeledeDnsBundle/processCtrl.sh

start() {

	#优先保证配合分流软件可以正常运行
	local pswEnabled=$(getUciConfig passwall global enabled 0)
	local clashEnabled=$(getUciConfig openclash openclash enable 0)
	
	local globalEnabled=$(getUciConfig ${CONFIGURATION} global "enabled" 0)
	local adBlockEnabled=$(getUciConfig ${CONFIGURATION} global "adBlock" 0)
	local shuntResolutionEnabled=$(getUciConfig ${CONFIGURATION} global "shuntResolution" 0)
	
	local needRestartDnsmasq=0
	local needRestartNetwork=0
	
	local adBlockTargetState=0
	local shuntDnsTargetState=0
	local domesticDnsTargetState=0
	local overseasDnsTargetState=0
	
	#local ROUTER_IP=$(ifconfig br-lan | grep 'inet addr' | sed 's/^.*addr://g' | cut -d ' ' -f 1)
	
	if [ "$globalEnabled" -eq 1 ] && [ "$adBlockEnabled" -eq 1 ]; then
		makeDnsmasqListenAt54
		adBlockTargetState=1
	else
		makeDnsmasqListenAt53
	fi
	
	if [ "${pswEnabled}" -eq 1 ]; then
		#psw 已经开启
		local homeledeDnsModel=$(getUciConfig passwall global dns_mode "homelede")
		if [ "${homeledeDnsModel}" == "homelede" ]; then
			#开启了passwall，且使用homelede分流，此时要开启国内，海外两组DNS
			domesticDnsTargetState=1
			overseasDnsTargetState=1
		fi
		#此时应该关闭dnsmasq上游的转发
		setDnsmasqUpstreamToEmpty
		setLanDnsToLocalhost
	else
		#psw 关闭
		setLanDnsToEmpty
		
		if [ "$globalEnabled" -eq 1 ]; then
			if [ "$shuntResolutionEnabled" -eq 1 ]; then
				domesticDnsTargetState=1
				overseasDnsTargetState=1
				if [ "${clashEnabled}" -eq 0 ]; then
					#clash没开
					shuntDnsTargetState=1
					#dnsmasq 上游指向shuntdns
					uci -q del dhcp.@dnsmasq[-1].server
					local shuntDnsPort=$(getUciConfig ${CONFIGURATION} "shuntResolution" "shuntEntryPort" 5053)
					uci -q add_list dhcp.@dnsmasq[0].server=127.0.0.1#"$shuntDnsPort"
					uci -q delete dhcp.@dnsmasq[0].resolvfile
					uci -q set dhcp.@dnsmasq[0].noresolv=1
					needRestartDnsmasq=1
				fi
			else
				#如果系统开启了Clash
				if [ "${clashEnabled}" -eq 1 ]; then
					echo openclash is on, dnsmasq upstream has been taken over.
				else
					#不开启分流解析，则让dnsmasq使用默认策略
					makeDnsmasqUsingDefaultReslovePolicy
					setDnsmasqUpstreamToEmpty
				fi 
			fi
		else
			#PSW关闭，且Bundle整体禁用
			if [ "${clashEnabled}" -eq 1 ]; then
				echo openclash is on, dnsmasq upstream has been taken over.
			else
				#不开启分流解析，则让dnsmasq使用默认策略
				makeDnsmasqUsingDefaultReslovePolicy
				setDnsmasqUpstreamToEmpty
			fi 
		fi
	fi
	 
	saveProcessExpectedStates ${adBlockTargetState} ${shuntDnsTargetState} ${domesticDnsTargetState} ${overseasDnsTargetState}
	makeSureAllProcessStateAsExpected ${adBlockTargetState} ${shuntDnsTargetState} ${domesticDnsTargetState} ${overseasDnsTargetState}
	
	if [ "$needRestartDnsmasq" -eq 1 ]; then
		uci commit dhcp
		/etc/init.d/dnsmasq restart
	fi
	if [ "$needRestartNetwork" -eq 1 ]; then
		uci commit network
		/etc/init.d/network restart
	fi

	echo "* * * * * /etc/homeledeDnsBundle/dnsBundleCron.sh" >>/etc/crontabs/root
}

stop()
{
	#有配置变更，则同步配置，已经运行的停止运行
	
	local adBlockCurrentState=$(statusAdBlock)
	[ "${adBlockCurrentState}" == "0" ] &&  adBlockCurrentState=0 || adBlockCurrentState=1
	local shuntDnsCurrentState=$(statusShuntDns)
	[ "${shuntDnsCurrentState}" == "0" ] &&  shuntDnsCurrentState=0 || shuntDnsCurrentState=1
	local domesticDnsCurrentState=$(statusDomesticDns)
	[ "${domesticDnsCurrentState}" == "0" ] &&  domesticDnsCurrentState=0 || domesticDnsCurrentState=1
	local overseasDnsCurrentState=$(statusOverseasDns)
	[ "${overseasDnsCurrentState}" == "0" ] &&  overseasDnsCurrentState=0 || overseasDnsCurrentState=1
	
	#AdBlock没有uci配置因此直接stop
	if [ "$adBlockCurrentState" -eq 1 ]; then
		stopAdBlock
	fi
	
	local shuntDnsPortInConf=$(getUciConfig ${CONFIGURATION} "shuntResolution" "shuntEntryPort" 5053)
	local shuntDnsPort=$(getUciConfig chinadns-ng chinadns-ng bind_port 5053)
	if [ "$shuntDnsPortInConf" != "$shuntDnsPort" ]; then
		setUciConfig chinadns-ng chinadns-ng bind_port ${shuntDnsPortInConf}
		uci commit chinadns-ng
	fi
	
	if [ "$shuntDnsCurrentState" -eq 1 ]; then
		stopShuntDns
	fi
	
	local domesticDnsPortInConf=$(getUciConfig ${CONFIGURATION} "shuntResolution" "domesticPort" 6053)
	local domesticDnsPort=$(getUciConfig smartdns smartdns port 6053)
	if [ "$domesticDnsPortInConf" != "$domesticDnsPort" ]; then
		setUciConfig smartdns smartdns port ${domesticDnsPortInConf}
		uci commit smartdns
	fi
	
	if [ "$domesticDnsCurrentState" -eq 1 ]; then
		stopDomesticDns
	fi
	
	#海外DNS没有uci配置因此直接stop
	if [ "$overseasDnsCurrentState" -eq 1 ]; then
		stopOverseasDns
	fi
	
	saveProcessExpectedStates 0 0 0 0
	sed -i '/^.*dnsBundleCron.sh.*/d' /etc/crontabs/root >/dev/null 2>&1
}
